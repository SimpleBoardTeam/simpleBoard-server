name: CI pipeline

on:
  pull_request:
    branches:
      - develop
      - main
      - release/**

jobs:
  #################################################
  # 1) puml 체크
  #################################################
  changes:
    runs-on: ubuntu-latest
    outputs:
      puml_changed: ${{ steps.filter.outputs.puml }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            puml:
              - 'document/puml/**.puml'

  #################################################
  # 2) PlantUML ⇒ SVG
  #################################################
  plantuml:
    needs: changes
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1) 코드 체크아웃
      - uses: actions/checkout@v4

      # 2) JDK 설치
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      # 3) Graphviz + PlantUML JAR 내려받기
      - name: Install Graphviz & PlantUML
        if: needs.changes.outputs.puml_changed == 'true'  # .puml을 포함하고 있는 pr에 대해서만 동작
        run: |
          sudo apt-get update -y
          sudo apt-get install -y graphviz
          curl -sSL -o plantuml.jar \
            https://github.com/plantuml/plantuml/releases/download/v1.2025.3/plantuml-1.2025.3.jar

      # 4) .puml → .svg
      - name: Render .puml ➜ .svg
        if: needs.changes.outputs.puml_changed == 'true'  # .puml을 포함하고 있는 pr에 대해서만 동작
        run: |
          find document/puml -name '*.puml' -print0 \
          | xargs -0 java -jar plantuml.jar \
              -graphvizdot /usr/bin/dot -tsvg -overwrite -v

      # 5) 변경된 .svg 커밋
      - name: Commit generated SVGs
        if: needs.changes.outputs.puml_changed == 'true'  # .puml을 포함하고 있는 pr에 대해서만 동작
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(diagram): auto-generate SVGs"
          file_pattern: |
            document/puml/**.svg

  #################################################
  # 3) 단위 테스트
  #################################################
  unit-test:
    needs: plantuml
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      statuses: write

    steps:
      # 1) 소스 체크아웃
      - uses: actions/checkout@v4

      # 2) JDK 설치 + Gradle 캐싱
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: 'gradle'

      # 3) Gradle Wrapper 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4) 단위 테스트
      - name: Run unit tests
        run: ./gradlew --no-daemon test

      # 테스트 리포트 업로드
      - name: Upload Test Report (HTML)
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: build/reports/tests/test/**/*.html
      - name: Upload Test Report (XML)
        uses: actions/upload-artifact@v4
        with:
          name: junit-xml-report
          path: build/test-results/test/**/*.xml

      # 5) 빌드(JAR 파일 생성)
      - name: Build executable jar
        run: ./gradlew --no-daemon bootJar -x test --stacktrace

      # 빌드 실패 시 로그 업로드
      - name: Upload Build Logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: build/reports/
