@startuml
package "AuthCredential" {

  '== 내부 인증 도메인 ==
  entity AuthCredential <<Aggregate Root>> {
    +CredentialId : id
    +Email : email
    +Password : password
    +MemberId : memberId
    --
    +authenticate(rawPassword : String)
    +changePassword(currentRaw : String, newRaw : String)
  }

  class Password <<Value Object>> {
    +String : hashed
    --
    +validate()
    +matches(rawPassword : String) : Boolean
    +changeWith(currentRaw : String, newRaw : String) : Password
    +static hash(raw : String) : Password
  }

  class Email <<Value Object>> {
    +String : email
    --
    +validate()
  }

  class MemberId <<Value Object>> {
    +Long : id
  }

  interface PasswordHasher {
    +hash(raw : String) : String
    +matches(raw : String, hashed : String) : Boolean
  }

  AuthCredential -- Password
  AuthCredential -- Email
  AuthCredential -- MemberId
  Password ..> PasswordHasher

  '== 인증 전략 (이메일 로그인만 처리) ==
  interface AuthMethod {
    +authenticate(request: EmailLoginRequest) : AuthCredential
  }

  class EmailAuthMethod
  AuthMethod <|-- EmailAuthMethod
  EmailAuthMethod ..> EmailLoginRequest

  class EmailLoginRequest {
    +String : email
    +String : password
  }

}

package "OAuth (Spring Security)" {

  class OAuth2User {
    +String : provider
    +String : providerId
    +String : email
    +String : nickname
  }

  class OAuth2UserService {
    +loadUser(oauthRequest) : OAuth2User
  }

  class OAuthJoinService {
    +findOrRegister(oauthUser: OAuth2User) : MemberId
  }

  OAuth2UserService --> OAuth2User
  OAuthJoinService ..> OAuth2User
  OAuthJoinService --> MemberId
}
@enduml
