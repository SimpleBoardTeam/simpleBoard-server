@startuml
actor User
participant BoardController
participant BoardService
participant PermissionPolicyQueryRepository
participant PermissionPolicy
participant ManagerAssignment
participant Role
participant BoardRepository
Entity Board

User -> BoardController : DELETE /board/{boardId}
BoardController -> BoardService : deleteBoard(boardId, userId)

BoardService -> PermissionPolicyQueryRepository : findByBoardId(boardId)
PermissionPolicyQueryRepository --> BoardService : PermissionPolicy

BoardService -> PermissionPolicy : PermissionPolicy.can(userId, DELETE_BOARD)
PermissionPolicy -> ManagerAssignment : managerAssignments 에서 userId 일치하는 항목 찾기
ManagerAssignment -> Role : hasPermission(DELETE_BOARD)
Role --> ManagerAssignment : true / false
ManagerAssignment --> PermissionPolicy : true / false
PermissionPolicy --> BoardService : true / false

alt 권한 있음
    BoardService -> BoardRepository : findById(boardId)
    BoardRepository --> BoardService : Board

    BoardService -> Board : delete()
    BoardService -> BoardRepository : delete(board)
    BoardService --> BoardController : 성공 응답 반환
else 권한 없음
    BoardService -> Exception : throw AccessDeniedException
    BoardService --> BoardController : 403 Forbidden
end

BoardController --> User : HTTP 응답 반환
@enduml